name: Release
on:
  push:
    paths:
      - 'HeliosLauncher/package.json'
    branches:
      - master
      - 'prerelease/*'
    tags-ignore:
      - '*'

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Get version
        id: get-version
        shell: bash
        run: |
          VERSION=$(node -p "require('./HeliosLauncher/package.json').version")
          BRANCH=${GITHUB_REF#refs/heads/}
          IS_PRERELEASE=${{ contains(github.ref, 'prerelease/') }}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Dependencies
        run: |
          cd HeliosLauncher
          npm install

      - name: Build/Release Electron app
        uses: samuelmeuli/action-electron-builder@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          release: false
          package_root: HeliosLauncher
          mac_certs: ${{ secrets.mac_certs }}
          mac_certs_password: ${{ secrets.mac_certs_password }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CSC_IDENTITY_AUTO_DISCOVERY: false

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-${{ matrix.os }}
          path: HeliosLauncher/dist/*

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Get version
        id: get-version
        shell: bash
        run: |
          VERSION=$(node -p "require('./HeliosLauncher/package.json').version")
          IS_PRERELEASE=${{ contains(github.ref, 'prerelease/') }}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Delete existing latest tag
        if: ${{ !steps.get-version.outputs.is_prerelease }}
        run: |
          git tag -d latest || true
          git push origin :refs/tags/latest || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete existing prerelease tag
        if: ${{ steps.get-version.outputs.is_prerelease }}
        run: |
          git tag -d prerelease || true
          git push origin :refs/tags/prerelease || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ steps.get-version.outputs.is_prerelease && 'Pre-release' || 'Release' }} v${{ steps.get-version.outputs.version }}
          tag_name: ${{ steps.get-version.outputs.is_prerelease && 'prerelease' || 'latest' }}
          draft: false
          prerelease: ${{ steps.get-version.outputs.is_prerelease }}
          files: |
            artifacts/dist-macos-latest/*
            artifacts/dist-windows-latest/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
